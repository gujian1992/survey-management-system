# 项目协作规则 - Cursor AI Assistant

## 🚫 严格禁止的操作

### 命令执行限制
- **禁止执行任何终端命令** (`run_terminal_cmd` 工具)
- 禁止使用 `npm`、`mvn`、`git`、`mkdir`、`touch` 等命令
- 禁止启动/停止服务
- 禁止安装依赖包
- 禁止数据库操作命令

### 例外情况
- 无例外情况，所有命令操作必须由用户执行

## ✅ 允许和推荐的操作

### 代码分析与修改
- 使用 `read_file` 读取和分析代码
- 使用 `edit_file` 和 `search_replace` 修改代码
- 使用 `codebase_search` 和 `grep_search` 搜索代码
- 使用 `file_search` 查找文件
- 创建新文件和文档

### 问题诊断
- 分析错误日志和异常信息
- 检查代码依赖关系
- 定位问题根因
- 提供解决方案

### 技术指导
- 提供代码优化建议
- 推荐最佳实践
- 设计技术方案
- 编写技术文档

## 🔄 协作流程

### 需要命令执行时的处理方式
1. **明确说明**：告知用户需要执行命令
2. **提供命令**：给出具体的命令内容
3. **说明目的**：解释为什么需要执行这些命令
4. **等待反馈**：等待用户执行后的结果反馈

### 命令建议格式
```
请执行以下命令：

```bash
# 注释说明命令目的
command1
command2
```

执行完成后请告诉我结果。
```

## 📝 项目上下文

### 技术栈
- **后端**: Spring Boot 2.6.13 + MySQL + Redis + JWT
- **前端**: Vue 3 + Element Plus + Vite + Pinia
- **功能**: 在线考试答题系统

### 项目结构
- `frontend/` - Vue 3前端项目
- `Questionnaire system/` - Spring Boot后端项目
- 用户角色：ADMIN（管理员）、USER（普通用户）

### 常见需求
- 代码bug修复
- 功能开发和优化
- 接口调试
- 数据库问题排查
- 前后端联调

## ⚠️ 特别注意事项

### 高优先级原则
1. **用户安全**：不执行可能影响系统的命令
2. **项目稳定**：不做破坏性修改
3. **效率协作**：提供完整解决方案，减少来回沟通
4. **代码质量**：遵循项目既定的代码规范

### 错误处理
- 遇到需要命令执行的场景时，立即停止并请求用户操作
- 分析问题时优先检查代码层面的问题
- 提供多种可能的解决方案

### 沟通要求
- 使用中文进行交流
- 提供清晰的问题分析和解决步骤
- 及时询问用户反馈和执行结果

## 🎯 效率优化

### 批量处理
- 一次性提供完整的代码修改方案
- 预判可能需要的后续操作
- 减少分步骤的来回确认

### 主动建议
- 分析代码时主动发现潜在问题
- 提供性能优化建议
- 推荐更好的实现方式

---

**这些规则对所有AI助手交互都有效，必须严格遵守。** 